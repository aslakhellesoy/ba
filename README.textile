h1. Ba

Ba is a conference and event management system based on "Radiant":http://radiantcms.org/.
Ba aims to be minimalistic and reuse Radiant and other Radiant extensions as much as possible.

Essentially, Ba lets site admins create special "happening" pages which have additional properties
such as a start date and end date. This page (and all subpages) can then use special Ba tags to design
the conference site.

Ba expects you to follow some conventions, such as defining special page parts for the happening
pages. Please refer to the Usage section for details.

We chose the name Ba because it's Japanese for "a place that supports sharing and relationship building" 
and because Japanese is hot. Ba will be used for a 500 people conference, "Smidig 2008":http://smidig2008.no
and hopefully for lots of other conferences and other happenings in the future.

h2. Features

The features in Ba target 3 main roles: Organisers, speakers and regular attendees.

h3. Organizers

The organiser tools consist of extensions to the Radiant admin panel as well as custom tags.

* Create new happenings (conference or event).
* Set up a schedule/program
* Send mass emails to attendees
* Manage price/discount codes
* List attendees and billing status
* Several radius tags for happening related content

h3. Speakers

* Register talks/presentations
* Attach slides

h3. Attendees + speakers

* Maintain a bio

h2. Installation

The first thing you need to do is to create a clone of Radiant. Actually, you should clone
"Aslak Helles√∏y's Radiant clone":http://github.com/aslakhellesoy/radiant/tree/master, because this
clone has Ba and all other required extensions and plugins installed as Git submodules. Here is how
you do that:

<pre><code>git clone git://github.com/aslakhellesoy/radiant.git radiant_ba
cd radiant_ba
git submodule init
git submodule update
</code></pre>

When you have a local clone, set up you database configuration. Copy one of the config/database.xxx.yml files to 
config/database.yml. If you're using anything else than SQLite (which works fine) you also need to create 
the databases specified in config.yml.

Now, let's create all the tables:

<pre><code>rake db:bootstrap (Say yes to blow away db and choose the Styled blog template if you're new to Radiant)
rake db:migrate:extensions
rake radiant:extensions:update_all
</code></pre>

Start Radiant with script/server and go to http://localhost:3000

h2. Creating your first happening with Ba

Once you have Ba installed, you can set up as many happenings as you want. This is ideal for organisations and companies
that want to organise a happening more than once. You don't have to set up a new website - you just create a new page in
Radiant...

h3. Creating a new happening

# Create a new page (or edit an existing one)
# Select "Happening" from the page type dropdown list
# Save the page

When you go back to edit the happening page you just created, you'll see that a new part "attendance" has been created
with some default content. This is what users will see when they go to [happening url]/attendance. Depending on whether
or not the current user has already signed up (and whether or not he or she has registered any presentations), the user
will be able to sign up or edit an existing attendance details.

All of the available Ba tags are used on the created parts, and they are all documented in more detail in Radiant's 
admin interface. You can see this documentation by choosing the "Available Tags" link while editing a page and entering 
r:ba in the search box.

h3. Assigning prices

It's common to have different prices for the same happening. Students and sponsors may get a cheaper price than
regular attendees etc. Ba lets you create several prices for a happening and you can choose a code for
each one of them. People who know about these codes can then use them when signing up for a happening, and their
attendance will be associated with the correct price. It's important not to change a price once it's used, since
attendances are linked to it directly, and changing prices after the fact would lead to bad surprises!

Make sure each happening has a price with an empty code. SiteUsers who sign up for a happening without specifying
a price will get this price.

Note that Ba does not handle the billing itself (there is no ActiveMerchant or similar integration yet). This means
that you have to get the attendee data out of your database in a separate process and handle them outside Radiant/Ba.

h2. Creating a program

The program is created from presentation proposals which can be created underneath [happening url]/attendance. When
a potential speaker creates a presentation proposal, a regular radiant page is created underneath the happening. By
default those pages will be unpblished (draft), so only Radiant admins can see them.

h3. Creating a program skeleton

The first step to creating a program is to create the program skeleton. This is simply a "Program" page underneath your "Happening" page. You can use special tags to create your program. Example:

<pre><code>
<table>
  <tr>
    <td>13:00-13:45</td>
    <td><r:ba:program:presentation slot="1" empty-text="To be announced"/></td>
  </tr>
  <tr>
    <td>14:00-14:45</td>
    <td><r:ba:program:presentation slot="2" empty-text="To be announced"/></td>
  </tr>
</table>
</code></pre>

The ba:program:presentation tag will contain a link to the presentation you choose to put there. This is done in the admin
interface. All you need to do is to assign a unique id to each ba:program:presentation tag.

You can create several program pages underneath a happening. This allows you to have separate programs for each day. You still
have to make sure each id is unique across the program pages.

h3. Completing a program

On the Programs tab in the admin interface you can now select one of the programs. Here you can drag presentations onto
the slots in the program.

If the program page itself is published, dragging a presentation onto/out of the program will put the presentation page in the published/draft state respectively.

h2. Managing happenings

h3. Sending personalised invitations (NOT YET IMPLEMENTED)

When you have set up a happening, the first time you probably want to do is to let people know about it. Of course, you
have all the usual propaganda channels like blogging, email etc, but you can also use Ba's email feature to send out
personalised emails to people you want to attend.

Ba manages attendees separately from Radiant's admin/developer site_users (Ba stores them in the site_users table). Maybe
you have a large site_user base already. Just import them into the site_users table. From the admin interface you can send
mass emails in several different ways:

* All site_users in the system
* All attendees of a given happening
* All presenters of a given happening

You do this by creating a subpage of your happening of type MailPage. Do not publish it. On this page you create two parts,
"body" and "subject". In each part you can use special tags related to the site_user, making it possible to create emails
with personalised activation links, personal names etc.

h2. Contributing

Want to help out with development of Ba? Start by reading "8 steps for fixing other people's code":http://drnicwilliams.com/2007/06/01/8-steps-for-fixing-other-peoples-code/ if you're new to
open source development. Then, follow the installation instructions above. You can't check out the Ba repository alone - 
it has to be within a Radiant clone.

h3. Run tests

When you have the code installed, make sure you can run the awesome test suite based on RSpec and "Cucumber":http://github.com/aslakhellesoy/cucumber/tree/master.

<pre><code>rake radiant:extensions:ba:stories_and_specs
</code></pre>

This should produce all green, passing stories and specs. 

*Important*: You may have to comment out the routes in RADIANT_ROOT/test/fixtures/extensions/01_basic/basic_extension.rb
in order to make the stories pass.

During development it can be very useful to run individual stories and scenarios. This can be done
with commands like these:

<pre><code>cucumber vendor/extensions/ba/stories/create_conference.story
cucumber vendor/extensions/ba/stories/create_conference.story --line 7
cucumber --help
</code></pre>

This requires the cucumber gem to be installed. You can do that like this:

<pre><code>cd vendor/plugins/cucumber
rake install_gem
</code></pre>

h3. BDD

If you have found a bug or want to add a feature, start by writing a new story or scenario that describes the
feature you want. Snoop around in the existing stories (in the stories folder) to get started. Alternatively,
if you want to fix something more low level, write a spec instead (see the specs folder).

Now run the stories or specs again. The one you wrote should fail. (If it doesn't you're doing something wrong,
or the feature is already implemented).

This is when you start writing code. You might as well get used to doing it this way, because we won't accept
any patches unless you also have stories or specs for your code. This is because we don't want to end up with a 
brittle, unmaintainable, undocumented pile of code that nobody understands. (Yes, stores and specs are *documentation* too).

If you think this sounds annoying, try it out anyway. You'll end up writing better (and less) code this way. Trust me.
Work outside-in (the outside being the story, the inside being the low level code). Do it the "BDD":http://en.wikipedia.org/wiki/Behavior_driven_development way.

h3. Tips

These tips apply to Rails development in general...

* Talk to models directly in Given steps
* Use Webrat in When steps
* Use Webrat and/or models in Then steps
* Organise steps in files named accordingly to resources used
* Avoid assigning @variables in steps. It will couple your steps and make them harder to reuse.

h2. Deployment

We recommend deploying Radiant+Ba to a POSIX server (Linux/Solaris), because that's what we're familiar with.
Use "Capistrano":http://www.capify.org/ for this.

You may try to package the whole thing into a war file with "Warbler":http://caldersphere.rubyforge.org/warbler/
and deploy it to a Java servlet container, but noone has tried this yet (to our knowledge).

h2. Getting in touch

There is no mailing list or forum yet, so please use the radiant forum for now. If it gets too busy there we'll
set up a separate mailing list.

h2. Credits

* Marty Haught for his "Page Event":http://github.com/mghaught/radiant-page-event/tree/master extension. Ba is inspired from this.
* Tobin Richard for the "Shopping Trike" extension. It gave me insight into how to organise different dynamic pages in parts.
* Johannes Brodwall for help on early versions of Ba